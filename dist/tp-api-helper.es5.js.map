{"version":3,"file":"tp-api-helper.es5.js","sources":["../src/tp-api-helper.ts"],"sourcesContent":["let request = require(\"request\")\r\nimport * as $ from \"jquery\"\r\n\r\nexport type EntityType =\r\n  | \"UserStories\"\r\n  | \"Bugs\"\r\n  | \"Builds\"\r\n  | \"Epics\"\r\n  | \"Features\"\r\n  | \"Tasks\"\r\n  | \"Requesters\"\r\n  | \"Users\"\r\n  | \"Assignables\"\r\n  | \"Generals\"\r\n  | \"Projects\"\r\n  | \"EntityStates\"\r\n\r\nexport class Entity {\r\n  ResourceType: EntityType\r\n  EntityType: any\r\n}\r\nexport class Results {\r\n  Next?: string\r\n  Prev?: string\r\n  Items: Array<Entity>\r\n}\r\n\r\nexport class TargetProcess {\r\n  options: any = {\r\n    json: true,\r\n    qs: { token: undefined },\r\n    headers: { Authorization: undefined }\r\n  }\r\n  headers: Headers\r\n  private url: string\r\n  constructor(\r\n    public domain: string,\r\n    public protocol: \"http\" | \"https\",\r\n    public version: number,\r\n    public username?: string,\r\n    public password?: string\r\n  ) {\r\n    this.options.url =\r\n      this.protocol + \"://\" + this.domain + \"/api/v\" + this.version\r\n    if (this.username && this.password) {\r\n      this.options.qs.token = new Buffer(\r\n        this.username + \":\" + this.password\r\n      ).toString(\"base64\")\r\n    }\r\n  }\r\n\r\n  /**\r\n  Fetch an entity\r\n  */\r\n  get(entity: Entity, id?: number) {\r\n    return new GetEntity(this, entity, id)\r\n  }\r\n  /**\r\n  Create or update an entity\r\n  */\r\n  post(entity: Entity, id?: number) {\r\n    return new PostEntity(this, entity, id)\r\n  }\r\n  /**\r\n  Delete an entity id required\r\n  */\r\n  delete(entity: Entity, id: number) {\r\n    return new DeleteEntity(this, entity, id)\r\n  }\r\n\r\n  execute(): Promise<Results | Entity> {\r\n    return new Promise((resolve, reject) => {\r\n      this.options.callback = (error: any, response: any, body: any) => {\r\n        if (error) {\r\n          reject(new Error(error))\r\n        } else {\r\n          resolve(body)\r\n        }\r\n      }\r\n      new request.Request(this.options)\r\n    })\r\n  }\r\n}\r\n\r\nexport class Operation extends TargetProcess {\r\n  constructor(\r\n    targetProcess: TargetProcess,\r\n    entity: Entity,\r\n    method: string,\r\n    id?: number\r\n  ) {\r\n    super(\r\n      targetProcess.domain,\r\n      targetProcess.protocol,\r\n      targetProcess.version,\r\n      targetProcess.username,\r\n      targetProcess.password\r\n    )\r\n    this.options.entity = entity\r\n    this.options.url = this.options.url + \"/\" + this.options.entity\r\n    if (id) {\r\n      this.options.entityid = id\r\n      this.options.url = this.options.url + \"/\" + this.options.entityid\r\n    }\r\n    this.options.method = method\r\n    this.autherization(\"Basic \" + this.options.qs.token)\r\n    this.token(this.options.qs.token)\r\n  }\r\n  /**\r\nToken, which was generated at Personal Details page (Access Tokens tab). Other options: token or basic authentication\r\n*/\r\n  access_token(value: string): Operation {\r\n    this.options.qs.access_token = value\r\n    return this\r\n  }\r\n  /**\r\n  Token, which was generated at /api/v1/Authentication. Other options: access_token or basic authentication\r\n  */\r\n  token(value: string): Operation {\r\n    this.options.qs.token = value\r\n    return this\r\n  }\r\n  /**\r\n  Basic authentication as a a Base64 encoded values for login:password. Other options: access_token or token\r\n  */\r\n  autherization(value: string): Operation {\r\n    this.options.headers[\"Authorization\"] = value\r\n    return this\r\n  }\r\n}\r\nexport class GetEntity extends Operation {\r\n  constructor(targetProcess: TargetProcess, entity: Entity, id?: number) {\r\n    super(targetProcess, entity, \"GET\", id)\r\n  }\r\n  /**\r\n  Filtering by fields and nested fields. Example: EntityState.IsInitial eq 'true'\r\n  */\r\n  where(value: string): GetEntity {\r\n    this.options.qs.where = value\r\n    return this\r\n  }\r\n  /**\r\n  You can explicitly specify attributes that you want to have in the response. It is possible to include Fields, Collections and Nested Entities (with inner Fields). Example: [Name, Iteration[Name]]. Cannot be used together with 'exclude' param.\r\n  */\r\n  include(...value: string[]): GetEntity {\r\n    if (this.options.qs.exclude) {\r\n      this.options.qs.exclude = undefined\r\n    }\r\n    this.options.qs.include = \"[\" + value.toString() + \"]\"\r\n    return this\r\n  }\r\n  /**\r\n  You can explicitly specify attributes that you do not want to have in the response. Cannot be used together with 'include' param.\r\n  */\r\n  exclude(...value: string[]): GetEntity {\r\n    if (this.options.qs.include) {\r\n      this.options.qs.include = undefined\r\n    }\r\n    this.options.qs.exclude = \"[\" + value.toString() + \"]\"\r\n    return this\r\n  }\r\n  /**\r\n  Get more information about Entity in a single request. For example, you can retrieve Tasks and Bugs count: [Bugs-Count,Tasks-Count]\r\n  */\r\n  append(value: string): GetEntity {\r\n    this.options.qs.append = value\r\n    return this\r\n  }\r\n  /**\r\n  This parameter controls paging. Defines how many items will be skipped\r\n  */\r\n  skip(value: number): GetEntity {\r\n    this.options.qs.skip = value\r\n    return this\r\n  }\r\n  /**\r\n  This parameter controls paging. Defines how many items will be returned. Limit is 1000\r\n  */\r\n  take(value: number): GetEntity {\r\n    this.options.qs.take = value\r\n    return this\r\n  }\r\n  /**\r\n  This parameter controls paging for inner collections. Defines how many items will be returned. Limit is 1000 (in total, not per one item)\r\n  */\r\n  innertake(value: number): GetEntity {\r\n    this.options.qs.innertake = value\r\n    return this\r\n  }\r\n  /**\r\n  Ordering by fields and nested fields\r\n  */\r\n  ordreby(value: string): GetEntity {\r\n    this.options.qs.ordreby = value\r\n    return this\r\n  }\r\n  /**\r\n  Ordering by fields and nested fields\r\n  */\r\n  orderbydesc(value: string): GetEntity {\r\n    this.options.qs.qs.orderbydesc = value\r\n    return this\r\n  }\r\n  /**\r\n  Response format (JSON or XML)\r\n  */\r\n  format(value: \"JSON\" | \"XML\"): GetEntity {\r\n    this.options.qs.format = value\r\n    return this\r\n  }\r\n}\r\n\r\nexport class PostEntity extends Operation {\r\n  constructor(targetProcess: TargetProcess, entity: Entity, id?: number) {\r\n    super(targetProcess, entity, \"POST\", id)\r\n  }\r\n\r\n  withBody<T>(value: T) {\r\n    this.options.json = value\r\n    return this\r\n  }\r\n  /**\r\n  Response format (JSON or XML)\r\n  */\r\n  format(value: string): PostEntity {\r\n    this.options.qs.format = value\r\n    return this\r\n  }\r\n\r\n  /**\r\nYou can explicitly specify attributes of newly created or updated Story that you want to have in the response. It is possible to include Fields, Collections and Nested Entities (with inner Fields). Example: [Name, Iteration[Name]]. Cannot be used together with 'exclude' param.\r\n*/\r\n  include(...value: string[]): PostEntity {\r\n    if (this.options.qs.exclude) {\r\n      this.options.qs.exclude = undefined\r\n    }\r\n    this.options.qs.include = \"[\" + value.toString() + \"]\"\r\n    return this\r\n  }\r\n  /**\r\n  You can explicitly specify attributes of newly created or updated Story that you do not want to have in the response. Cannot be used together with 'include' param.\r\n  */\r\n  exclude(...value: string[]): PostEntity {\r\n    if (this.options.qs.include) {\r\n      this.options.qs.include = undefined\r\n    }\r\n    this.options.qs.exclude = \"[\" + value.toString() + \"]\"\r\n    return this\r\n  }\r\n  /**\r\nSpecify in which format (JSON or XML) and chartset (in case of not ASCII characters) you're sending the body. E.g.: application/xml or application/json; charset=UTF-8\r\n*/\r\n  content_type(value: \"JSON\" | \"XML\"): PostEntity {\r\n    this.options.headers[\"Content-type\"] = value\r\n    return this\r\n  }\r\n}\r\n\r\nexport class DeleteEntity extends Operation {\r\n  constructor(targetProcess: TargetProcess, entity: Entity, id: number) {\r\n    super(targetProcess, entity, \"DELETE\", id)\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}